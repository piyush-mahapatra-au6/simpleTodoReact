{"version":3,"sources":["TodoItem/todoItem.js","TodoList/todoList.js","AddTodo/addTodo.js","App.js","serviceWorker.js","index.js"],"names":["TodoItem","toggleTodo","props","updateTodoFn","todo","this","className","completed","onClick","text","Component","TodoList","updateTodo","todos","map","_todo","_index","key","AddTodo","updateInput","e","setState","target","value","submitTodo","preventDefault","addTodoFn","state","document","getElementById","onSubmit","id","onChange","type","placeholder","App","componentDidMount","localStorage","getItem","savedTodos","JSON","parse","console","log","addTodo","a","setItem","stringify","newTodos","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"iTAaeA,G,wNALbC,WAAa,WACX,EAAKC,MAAMC,aAAa,EAAKD,MAAME,O,uDAN3B,IACAA,EAASC,KAAKH,MAAdE,KACR,OAAO,yBAAKE,UAAW,YAAcF,EAAKG,UAAY,aAAc,IAAKC,QAASH,KAAKJ,YAAaG,EAAKK,U,GAHtFC,cCiBRC,E,4MALbC,WAAa,SAACR,GACZ,EAAKF,MAAMC,aAAaC,I,uDAXhB,IAAD,OACCS,EAAUR,KAAKH,MAAfW,MACR,OACE,yBAAKP,UAAU,qBACZO,EAAMC,KAAI,SAACC,EAAOC,GACjB,OAAO,kBAAC,EAAD,CAAUb,aAAc,EAAKS,WAAWK,IAAKD,EAAOZ,KAAMW,Y,GANpDL,aCmCRQ,E,kDAnCf,aAAc,IAAD,8BACT,gBAuBFC,YAAc,SAACC,GACb,EAAKC,SAAS,CAACjB,KAAMgB,EAAEE,OAAOC,SAzBrB,EA4BXC,WAAY,SAACJ,GACTA,EAAEK,iBACF,EAAKvB,MAAMwB,UAAU,EAAKC,MAAMvB,MAChCwB,SAASC,eAAe,gBAAgBN,MAAQ,IA7BlD,EAAKI,MAAO,CACRvB,KAAK,IAHA,E,qDAQD,IAAD,OACP,OACE,yBAAKE,UAAU,oBACb,0BAAMwB,SAAU,SAACV,GAAD,OAAK,EAAKI,WAAWJ,KACnC,2BACAW,GAAG,eACDC,SAAU,SAACZ,GAAD,OAAM,EAAKD,YAAYC,IACjCa,KAAK,OACLC,YAAY,eAEd,4BAASD,KAAK,UAAd,kB,GAnBYvB,aC0DPyB,E,kDAtDb,aAAe,IAAD,8BACZ,gBAcFC,kBAAoB,WAClB,IAAMvB,EAAQwB,aAAaC,QAAQ,SACnC,GAAIzB,EAAO,CACT,IAAM0B,EAAaC,KAAKC,MAAM5B,GAC9B,EAAKQ,SAAS,CAAER,MAAO0B,SAEvBG,QAAQC,IAAI,gBArBF,EAyBdC,QAzBc,uCAyBJ,WAAOxC,GAAP,SAAAyC,EAAA,sEACF,EAAKxB,SAAS,CAClBR,MAAM,GAAD,mBACA,EAAKc,MAAMd,OADX,CAEH,CACEJ,KAAML,EACNG,WAAW,OANT,OAUR8B,aAAaS,QAAQ,QAASN,KAAKO,UAAU,EAAKpB,MAAMd,QACxD6B,QAAQC,IAAIN,aAAaC,QAAQ,UAXzB,2CAzBI,wDAuCd1B,WAvCc,uCAuCD,WAAOR,GAAP,eAAAyC,EAAA,6DACLG,EAAW,EAAKrB,MAAMd,MAAMC,KAAI,SAACC,GACrC,OAAIX,IAASW,EACJ,CACLN,KAAML,EAAKK,KACXF,WAAYH,EAAKG,WAETQ,KAPH,SASL,EAAKM,SAAS,CAAER,MAAOmC,IATlB,OAUXX,aAAaS,QAAQ,QAASN,KAAKO,UAAU,EAAKpB,MAAMd,QACxD6B,QAAQC,IAAIK,GAXD,2CAvCC,sDAEZ,EAAKrB,MAAQ,CACXd,MAAO,IAHG,E,qDAOZ,OACE,6BACE,kBAAC,EAAD,CAASa,UAAWrB,KAAKuC,UACzB,kBAAC,EAAD,CAAUzC,aAAcE,KAAKO,WAAYC,MAAOR,KAAKsB,MAAMd,a,GAXjDH,aCOEuC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEF5B,SAASC,eAAe,SDyHpB,kBAAmB4B,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLtB,QAAQsB,MAAMA,EAAMC,c","file":"static/js/main.1eadc5b6.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './style.css'\nclass TodoItem extends Component {\n  render() {\n    const { todo } = this.props;\n    return <div className={'todoItem' + (todo.completed ? ' completed': '')} onClick={this.toggleTodo}>{todo.text}</div>;\n  }\n\n  toggleTodo = () => {\n    this.props.updateTodoFn(this.props.todo)\n  };\n}\n\nexport default TodoItem;\n","import React, { Component } from 'react';\nimport TodoItem from '../TodoItem/todoItem';\n\nclass TodoList extends Component {\n  render() {\n    const { todos } = this.props;\n    return (\n      <div className=\"todoListContainer\">\n        {todos.map((_todo, _index) => {\n          return <TodoItem updateTodoFn={this.updateTodo}key={_index}todo={_todo}/>;\n        })}\n      </div>\n    );\n  }\n  updateTodo = (todo) => {\n    this.props.updateTodoFn(todo)\n  }\n}\n\nexport default TodoList;\n","import React, { Component } from 'react';\n\nclass AddTodo extends Component {\nconstructor(){\n    super()\n    this.state ={\n        todo:\"\"\n    }\n}\n\n\n  render() {\n    return (\n      <div className=\"addTodoContainer\">\n        <form onSubmit={(e)=>this.submitTodo(e)}>\n          <input\n          id=\"addTodoInput\"\n            onChange={(e)=> this.updateInput(e)}\n            type=\"text\"\n            placeholder=\"enter todo\"\n          ></input>\n          <button  type=\"submit\">Add Todo</button>\n        </form>\n      </div>\n    );\n  }\n\n  updateInput = (e) => {\n    this.setState({todo: e.target.value})\n    // console.log(e.target.value);\n  };\n  submitTodo= (e)=>{\n      e.preventDefault();\n      this.props.addTodoFn(this.state.todo )\n      document.getElementById('addTodoInput').value = ''\n  }\n}\n\nexport default AddTodo;\n","import React, { Component } from 'react';\nimport './App.css';\nimport TodoList from './TodoList/todoList';\nimport AddTodo from './AddTodo/addTodo.js';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      todos: [],\n    };\n  }\n  render() {\n    return (\n      <div>\n        <AddTodo addTodoFn={this.addTodo} />\n        <TodoList updateTodoFn={this.updateTodo} todos={this.state.todos} />\n      </div>\n    );\n  }\n\n  componentDidMount = () => {\n    const todos = localStorage.getItem('todos');\n    if (todos) {\n      const savedTodos = JSON.parse(todos);\n      this.setState({ todos: savedTodos });\n    } else {\n      console.log(' no  Tofdos');\n    }\n  };\n\n  addTodo = async (todo) => {\n    await this.setState({\n      todos: [\n        ...this.state.todos,\n        {\n          text: todo,\n          completed: false,\n        },\n      ],\n    });\n    localStorage.setItem('todos', JSON.stringify(this.state.todos));\n    console.log(localStorage.getItem('todos'));\n  };\n\n  updateTodo = async (todo) => {\n    const newTodos = this.state.todos.map((_todo) => {\n      if (todo === _todo)\n        return {\n          text: todo.text,\n          completed: !todo.completed,\n        };\n      else return _todo;\n    });\n    await this.setState({ todos: newTodos });\n    localStorage.setItem('todos', JSON.stringify(this.state.todos));\n    console.log(newTodos);\n  };\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}